{"version":3,"sources":["components/TodoForm.js","components/Todo.js","components/TodoList.js","App.js","index.js"],"names":["TodoForm","props","useState","input","setInput","inputRef","useRef","useEffect","current","focus","className","onSubmit","e","preventDefault","id","Math","floor","random","text","type","placeholder","value","name","onChange","target","ref","Todo","todos","completeTodo","removeTodo","updateTodo","edit","setEdit","map","todo","index","isComplete","onClick","TodoList","setTodos","test","newTodos","updatedTodos","removeArray","filter","todoId","newValue","prev","item","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4MAkCeA,MA/Bf,SAAkBC,GAAQ,IAAD,EACCC,mBAAS,IADV,mBAClBC,EADkB,KACXC,EADW,KAGnBC,EAAWC,iBAAO,MAoBpB,OAnBJC,qBAAU,WACNF,EAASG,QAAQC,WAmBT,uBAAMC,UAAU,YAAYC,SAZnB,SAAAC,GACjBA,EAAEC,iBAEFZ,EAAMU,SAAS,CACXG,GAAIC,KAAKC,MAAsB,IAAhBD,KAAKE,UACpBC,KAAMf,IAGVC,EAAS,KAID,UACI,uBAAOe,KAAK,OAAOC,YAAY,UAAUC,MAAOlB,EAAOmB,KAAK,OAAOZ,UAAU,aAAaa,SAjBrF,SAAAX,GACjBR,EAASQ,EAAEY,OAAOH,QAgB4GI,IAAKpB,IACvH,wBAAQK,UAAU,cAAlB,oC,eCgBDgB,MAvCf,YAAgE,IAAhDC,EAA+C,EAA/CA,MAAOC,EAAwC,EAAxCA,aAAcC,EAA0B,EAA1BA,WAAYC,EAAc,EAAdA,WAAc,EACnC5B,mBAAS,CAC7BY,GAAI,KACJO,MAAO,KAHgD,mBACpDU,EADoD,KAC9CC,EAD8C,KAc3D,OAAGD,EAAKjB,GACG,cAAC,EAAD,CAAUiB,KAAMA,EAAMpB,SATZ,SAAAU,GACjBS,EAAWC,EAAKjB,GAAIO,GACpBW,EAAQ,CACJlB,GAAI,KACJO,MAAO,QAQRM,EAAMM,KAAI,SAACC,EAAMC,GAAP,OACb,sBACIzB,UAAawB,EAAKE,WAAa,oBAAoB,WADvD,UAII,qBAAmBC,QAAS,kBAAMT,EAAaM,EAAKpB,KAApD,SACKoB,EAAKhB,MADAgB,EAAKpB,IAGf,sBAAKJ,UAAU,QAAf,UACI,cAAC,IAAD,CACA2B,QAAS,kBAAMR,EAAWK,EAAKpB,KAC/BJ,UAAU,gBACV,cAAC,IAAD,CACA2B,QAAS,kBAAML,EAAQ,CAAClB,GAAIoB,EAAKpB,GAAIO,MAAOa,EAAKhB,QACjDR,UAAU,mBAXTyB,OCkBFG,MAzCf,WAAqB,IAAD,EACUpC,mBAAS,IADnB,mBACRyB,EADQ,KACFY,EADE,KAgChB,OACI,gCACI,wDACH,cAAC,EAAD,CAAU5B,SAhCC,SAAAuB,GACZ,GAAKA,EAAKhB,OAAQ,QAAQsB,KAAKN,EAAKhB,MAApC,CAGA,IAAMuB,EAAQ,CAAIP,GAAJ,mBAAaP,IAC3BY,EAASE,OA4BR,cAAC,EAAD,CAAMd,MAAOA,EAAOC,aAdJ,SAAAd,GACjB,IAAI4B,EAAef,EAAMM,KAAI,SAAAC,GAIzB,OAHGA,EAAKpB,KAAOA,IACXoB,EAAKE,YAAcF,EAAKE,YAErBF,KAEXK,EAASG,IAOwCb,WA1BlC,SAAAf,GACf,IAAM6B,EAAc,YAAKhB,GAAOiB,QAAO,SAAAV,GAAI,OAAIA,EAAKpB,KAAOA,KAC3DyB,EAASI,IAwBgEb,WArB1D,SAACe,EAAQC,GACnBA,EAAS5B,OAAQ,QAAQsB,KAAKM,EAAS5B,OAG1CqB,GAAS,SAAAQ,GAAI,OAAIA,EAAKd,KAAI,SAAAe,GAAI,OAAKA,EAAKlC,KAAO+B,EAASC,EAAWE,eCX9DC,MARf,WACE,OACE,qBAAKvC,UAAU,WAAf,SACI,cAAC,EAAD,OCHRwC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.baedee47.chunk.js","sourcesContent":["import React, {useState, useEffect, useRef} from 'react';\n\n\nfunction TodoForm(props) {\nconst [input, setInput] = useState('');\n\nconst inputRef = useRef(null);\nuseEffect(() => {\n    inputRef.current.focus();\n});\n\nconst handleChange = e => {\n    setInput(e.target.value);\n}\n\nconst handlesubmit = e => {\n    e.preventDefault();\n\n    props.onSubmit({\n        id: Math.floor(Math.random() * 1000),\n        text: input\n    });\n\n    setInput('');\n};\n\n    return (\n            <form className='todo-form' onSubmit={handlesubmit}>\n                <input type='text' placeholder='Type on' value={input} name='text' className='todo-input' onChange={handleChange} ref={inputRef}/>\n                <button className='todo-button'>Don't Forget......</button>\n            </form>\n    );\n}\n\nexport default TodoForm;\n","import React, {useState} from 'react';\nimport TodoForm from './TodoForm';\nimport TodoList from './TodoList';\nimport { RiCloseCircleLine } from 'react-icons/ri';\nimport { TiEdit } from 'react-icons/ti';\n\nfunction Todo({ todos, completeTodo, removeTodo, updateTodo }) {\n    const [edit, setEdit] = useState({\n        id: null,\n        value: ''\n    });\n\n    const submitUpdate = value => {\n        updateTodo(edit.id, value)\n        setEdit({\n            id: null,\n            value: ''\n        });\n    };\n\n    if(edit.id){\n        return <TodoForm edit={edit} onSubmit={submitUpdate} />\n    }\n\n    return todos.map((todo, index) => (\n        <div \n            className = {todo.isComplete ? 'todo-row complete':'todo-row'} \n            key={index}\n        >\n            <div key={todo.id} onClick={() => completeTodo(todo.id)}>\n                {todo.text}\n            </div>\n            <div className='icons'>\n                <RiCloseCircleLine \n                onClick={() => removeTodo(todo.id)}\n                className='delete-icon'/>\n                <TiEdit \n                onClick={() => setEdit({id: todo.id, value: todo.text})}\n                className='edit-icon'\n                />\n            </div>\n        </div>\n    ));\n}\n\nexport default Todo;\n","import React, {useState} from 'react';\nimport Todo from './Todo';\nimport TodoForm from './TodoForm';\n\nfunction TodoList() {\n    const  [todos,setTodos] = useState([]);\n\n    const addTodo = todo => {\n        if (!todo.text || /^\\s*$/.test(todo.text)) {\n          return;\n        }\n        const newTodos = [todo, ...todos];\n        setTodos(newTodos);\n    };\n    const removeTodo = id => {\n        const removeArray = [ ...todos].filter(todo => todo.id !== id);\n        setTodos(removeArray);\n    };\n\n    const updateTodo = (todoId, newValue) => {\n        if (!newValue.text || /^\\s*$/.test(newValue.text)) {\n            return;\n          }\n          setTodos(prev => prev.map(item => (item.id === todoId ? newValue : item)));\n    };\n\n    const completeTodo = id => {\n        let updatedTodos = todos.map(todo => {\n            if(todo.id === id){\n                todo.isComplete = !todo.isComplete;\n            }\n            return todo;\n        })\n        setTodos(updatedTodos);\n    }\n\n    return (\n        <div>\n            <h1>Things that I forget!!</h1>\n         <TodoForm onSubmit={addTodo}/>   \n         <Todo todos={todos} completeTodo={completeTodo} removeTodo={removeTodo} updateTodo={updateTodo}/>\n        </div>\n    );\n}\n\nexport default TodoList;\n","import React from 'react';\nimport './App.css';\nimport TodoList from './components/TodoList';\n\nfunction App() {\n  return (\n    <div className='todo-app'>\n        <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}